# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Hotend heater pin                    [extruder] section
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Stepper Z1 enable pin                [stepper_z1] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

[include mainsail.cfg]
[include macros.cfg]
[include config_backup.cfg]
[include bigtreetech-ebb-sb-usb-v1.0.cfg]
[include stealthburner_leds.cfg]
[exclude_object]

[respond]
#default_type: echo

[mcu]
##  Obtain definition by "ls /dev/serial/by-id/*" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_360011000451313239393734-if00
restart_method: command
##--------------------------------------------------------------------

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 4000             #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

[input_shaper]
shaper_freq_x: 52.4
shaper_type_x: mzv
shaper_freq_y: 38.2
shaper_type_y: zv

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_5
##  Endstop connected to DIAG_0
[stepper_x]
step_pin: PC13
dir_pin: PF0
enable_pin: !PF1
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 25   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: PG13
driver_SGTHRS: 60 # 255 is the highest sensativity 

##  A Stepper - Right
##  Connected to MOTOR_4
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PF9
dir_pin: !PF10
enable_pin: !PG2
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 350mm build
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 25  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: PG12
driver_SGTHRS: 70 # 255 is the highest sensativity 
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_1
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PG0
dir_pin: !PG1
enable_pin: !PF15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
## position_endstop: -0.5
position_min: -5 # The Z carriage may need to travel below the Z=0
##--------------------------------------------------------------------

##  Uncomment below for 350mm build
position_max: 310

##--------------------------------------------------------------------
homing_speed: 15
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_0
[stepper_z1]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_7
[stepper_z2]
step_pin: PE6
dir_pin: !PA14
## Octopus 1.0 & 1.1.  Octopus PRO 1.0
#enable_pin: !PA0
## Octopus PRO 1.1
enable_pin: !PE0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PD3
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z3 Stepper - Front Right
##  Connected to MOTOR_2
[stepper_z3]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
##  Uncomment the following line if using the default SSR wiring from the docs site
heater_pin: PA3
##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
#heater_pin: PA1
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 1.0
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#   Fan Control
#####################################################################

##  Controller fan - FAN2
[controller_fan controller_fan]
pin: PD12
max_power: 1.0
fan_speed: 1
kick_start_time: 0
stepper: stepper_x

##  Exhaust fan - FAN3
#[heater_fan exhaust_fan]
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0


#####################################################################
#  Temp 
#####################################################################

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PF5
#min_temp: 0
#max_temp: 100
#gcode_id: C


[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
#min_temp: 0
#max_temp: 100

#####################################################################
#   LED Control
#####################################################################

## Chamber Lighting - HE2 Connector (Optional)
[output_pin caselight]
##Octopus 1.0 & 1.1, Octopus PRO 1.0
#pin: PB10
##Octopus PRO 1.1
pin: PA0
pwm:true
shutdown_value: 0
value:1
cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position: 175,175
speed:100
z_hop:10


##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]

#--------------------------------------------------------------------
##  Gantry Corners for 350mm Build
##  Uncomment for 350mm build
gantry_corners:
   -60,-10
   410,420
##  Probe points
points:
   50,25
   50,275
   300,275
   300,25

#--------------------------------------------------------------------
speed: 300
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10


########################################
# Filament Runout Sensor
########################################

###[filament_switch_sensor Runout_Sensor]
###pause_on_runout: False                           
###runout_gcode: PAUSE
#insert_gcode: RESUME
###switch_pin: !PG10                                 #   The pin on which the switch is connected. This parameter must be rovided.


########################################
#B Bed Mesh
########################################

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 35, 35
mesh_max: 300, 300
probe_count: 5, 5



########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################
# BTT EDDY DUO
#####################################################
# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_50445061285BE11C-if00 # This is the serial address of your eddy probe. This can be found by using the terminal of your klipper instance (typically through SSH) and using the command ```ls /dev/serial/by-id``` 
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu # Sets the type of sensor for Klipper to read
sensor_mcu: eddy # Sets the MCU of the eddy probe tempereature sensor
min_temp: 10 # Sets the minimum tempereature for eddys tempereature sensor to operate
max_temp: 100 # Sets the maximum tempereature for eddys tempereature sensor to operate

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 2
#i2c_address:
i2c_mcu: eddy  # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the MCU you have used.
i2c_bus: i2c0f # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the I2C bus you have used.
# Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
# For a standard Voron stealthburner X carriage mount there should be no need to change the defaults below.
x_offset: 0
y_offset: 21.42

# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2

[bed_mesh]
horizontal_move_z: 2
speed: 200
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
mesh_min: 25, 25  # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
mesh_max: 330, 310 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
probe_count: 9, 9
algorithm: bicubic
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[safe_z_home]
home_xy_position: 175, 175 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
z_hop: 10
z_hop_speed: 25
speed: 200

###############################Macros and related################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[save_variables]
#filename: ~/printer_data/config/variables.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.



# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[delayed_gcode RESTORE_PROBE_OFFSET]
#initial_duration: 1.
#gcode:
#  {% set svv = printer.save_variables.variables %}
#  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
#  {% endif %}



# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[gcode_macro Z_OFFSET_APPLY_PROBE]
#rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
#gcode:
#  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
#  {% if params.Z_ADJUST %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
#  {% endif %}
#  {% if params.Z %}
#    {% set paramList = rawparams.split() %}
#    {% for i in range(paramList|length) %}
#      {% if paramList[i]=="Z=0" %}
#        {% set temp=paramList.pop(i) %}
#        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
#        {% if paramList.append(temp) %}{% endif %}
#      {% endif %}
#    {% endfor %}
#    {% set rawparams=paramList|join(' ') %}
#    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
#  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}



#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BTT_BED_MESH_CALIBRATE
#gcode:
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
#  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg



#--------------------------------------------------------------------

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.406364, 0.163440, -0.025790, -0.066572, -0.064199, 0.021274, 0.078319, 0.217052, 0.399402
#*# 	0.426215, 0.169902, -0.020158, -0.054980, -0.064331, 0.008762, 0.053519, 0.193760, 0.376254
#*# 	0.422567, 0.171718, -0.009488, -0.051199, -0.064393, -0.014010, 0.031286, 0.174188, 0.344827
#*# 	0.405522, 0.169340, -0.004410, -0.025518, 0.004654, 0.029188, 0.043065, 0.183372, 0.336518
#*# 	0.384728, 0.155541, -0.011505, 0.000178, 0.168487, 0.046941, 0.058724, 0.169270, 0.305445
#*# 	0.389091, 0.171572, 0.014921, -0.002892, 0.048095, 0.065200, 0.111891, 0.210320, 0.342051
#*# 	0.400640, 0.180728, 0.032747, 0.013904, 0.032701, 0.098964, 0.127783, 0.240362, 0.381645
#*# 	0.362744, 0.156447, 0.013843, -0.015728, -0.004911, 0.066227, 0.085318, 0.204686, 0.345687
#*# 	0.381028, 0.169922, 0.093737, 0.071935, 0.009874, 0.088113, 0.110746, 0.218411, 0.369565
#*# x_count = 9
#*# y_count = 9
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 25.0
#*# max_x = 329.96
#*# min_y = 25.0
#*# max_y = 309.96
#*#
#*# [extruder]
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 66.329
#*# pid_ki = 3.685
#*# pid_kd = 298.480
#*#
#*# [probe_eddy_current btt_eddy]
#*# reg_drive_current = 15
#*# calibrate =
#*# 	0.050000:3221739.024,0.090000:3221294.945,0.130000:3220820.015,
#*# 	0.170000:3220398.687,0.210000:3219964.657,0.250000:3219532.957,
#*# 	0.290000:3219118.010,0.330000:3218687.575,0.370000:3218237.604,
#*# 	0.410000:3217820.553,0.450000:3217398.144,0.490000:3216971.345,
#*# 	0.530000:3216548.013,0.570000:3216141.963,0.610000:3215729.622,
#*# 	0.650000:3215336.806,0.690000:3214915.046,0.730000:3214529.371,
#*# 	0.770000:3214092.577,0.810000:3213691.642,0.850000:3213266.697,
#*# 	0.890000:3212858.098,0.930000:3212456.968,0.970000:3212068.306,
#*# 	1.010000:3211652.094,1.050000:3211281.118,1.090000:3210888.510,
#*# 	1.130000:3210539.891,1.170000:3210150.744,1.210000:3209798.402,
#*# 	1.250000:3209457.112,1.290000:3209089.762,1.330000:3208735.192,
#*# 	1.370000:3208400.779,1.410000:3208050.150,1.450000:3207710.763,
#*# 	1.490000:3207386.924,1.530000:3207054.039,1.570000:3206758.095,
#*# 	1.610000:3206440.920,1.650000:3206118.461,1.690000:3205824.530,
#*# 	1.730000:3205507.230,1.770000:3205215.262,1.810000:3204945.648,
#*# 	1.850000:3204637.272,1.890000:3204362.015,1.930000:3204071.930,
#*# 	1.970000:3203815.493,2.010000:3203529.131,2.050000:3203268.878,
#*# 	2.090000:3203011.530,2.130000:3202740.832,2.170000:3202502.670,
#*# 	2.210000:3202230.703,2.250000:3201994.511,2.290000:3201748.486,
#*# 	2.330000:3201535.327,2.370000:3201266.913,2.410000:3201041.229,
#*# 	2.450000:3200803.712,2.490000:3200579.667,2.530000:3200348.049,
#*# 	2.570000:3200148.607,2.610000:3199917.309,2.650000:3199694.581,
#*# 	2.690000:3199473.830,2.730000:3199278.299,2.770000:3199076.717,
#*# 	2.810000:3198874.471,2.850000:3198681.580,2.890000:3198485.501,
#*# 	2.930000:3198296.774,2.970000:3198108.140,3.010000:3197922.375,
#*# 	3.050000:3197741.076,3.090000:3197536.407,3.130000:3197395.768,
#*# 	3.170000:3197200.678,3.210000:3197054.129,3.250000:3196876.640,
#*# 	3.290000:3196709.966,3.330000:3196549.271,3.370000:3196391.816,
#*# 	3.410000:3196225.375,3.450000:3196070.645,3.490000:3195922.673,
#*# 	3.530000:3195767.169,3.570000:3195617.493,3.610000:3195476.553,
#*# 	3.650000:3195308.262,3.690000:3195186.242,3.730000:3195048.164,
#*# 	3.770000:3194913.601,3.810000:3194760.800,3.850000:3194630.256,
#*# 	3.890000:3194478.503,3.930000:3194364.147,3.970000:3194235.979,
#*# 	4.010000:3194101.299,4.050000:3193981.327
#*#
#*# [temperature_probe btt_eddy]
#*# calibration_temp = 41.197038
#*# drift_calibration =
#*# 	3240403.345822, -586.041370, 3.380968
#*# 	3232252.917866, -494.779060, 2.747459
#*# 	3223453.139433, -368.349815, 1.848284
#*# 	3215183.713487, -235.323206, 0.895544
#*# 	3208758.339784, -140.366090, 0.228659
#*# 	3203655.979265, -69.736511, -0.255864
#*# 	3199368.701591, -9.216421, -0.672717
#*# 	3195837.591218, 41.490037, -1.036788
#*# 	3193194.002786, 72.249429, -1.237103
#*# drift_calibration_min_temp = 40.60925546157235
